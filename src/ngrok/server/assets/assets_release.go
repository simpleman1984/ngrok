// Code generated by go-bindata.
// sources:
// assets/server/tls/snakeoil.crt
// assets/server/tls/snakeoil.key
// DO NOT EDIT!

// +build release

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsServerTlsSnakeoilCrt = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x55\xc9\xae\xab\x4a\x12\xdc\x5b\xf2\x3f\xf4\x1e\xb5\x98\xb1\xbd\x64\x1e\x8b\xd9\x60\xd8\x31\xcf\xb3\x31\x98\xaf\x6f\xce\xb9\x52\xeb\xe9\xea\xb1\xab\x28\x29\xc8\x8c\x8a\xc8\xfc\xef\xcf\xc7\xf0\xa2\xac\xff\x87\xe5\x6d\x57\x16\x64\x96\x76\xf9\x5f\xf4\x7a\x01\xb2\x2c\x70\x1c\xcb\xd2\x1f\x8b\xa5\x2d\x7e\xe3\xac\x40\x51\x87\x50\x2e\x3f\x89\x7e\x9e\x05\xc6\xa2\x37\x97\xe3\x35\x40\x37\x22\x8d\x3e\x79\xa6\x04\xac\xe7\x81\x9d\x3f\x68\x9b\x29\x74\xef\x7a\x61\xe8\xc2\x65\x1b\xbd\x8c\xc5\xb6\x8b\x71\x65\x8d\x7c\x7e\xe7\x6b\xda\xfa\xb9\x65\xe8\xc1\x65\x7d\xb2\x4f\xba\xc7\xac\x75\xfa\x27\x76\xf9\x27\x60\xe4\x5f\x26\x7a\xb7\x34\xb5\x22\xd7\xeb\x25\xc4\x95\x4f\xf4\x25\xeb\x18\x43\x36\xa9\x4c\x74\xe0\x82\x4d\xaf\xe9\x03\x70\xd6\x17\x1c\xf4\xe6\xff\x60\xf5\x2f\xb6\xff\x1f\xab\x19\x00\xac\x65\x63\xad\x80\xbb\x5e\x3c\xcb\x12\xf9\x4d\xf1\x9e\x07\xef\x82\xb3\xd5\x1f\x7e\x96\x01\xaa\x85\x09\x4b\xe4\x87\x9f\xa4\x23\xc7\xc0\xe5\x1d\xc0\xd0\x7f\xee\x4a\xa0\xc4\x5d\xfa\x8d\xb1\x65\x0d\xb0\xc7\xfb\xd4\xc1\xb6\x36\xbe\x08\xb8\x93\x89\x13\xe8\x65\xd2\xba\x7f\x56\x7d\xea\x53\xc9\x7f\x6b\xc3\x9c\xda\x70\x45\x21\x9b\xf4\xa9\xdf\xf5\x42\x17\x03\x7b\x9e\x18\x5a\x1f\xd6\x17\x4b\x6d\x4a\x94\x98\xb2\x10\xf0\x95\x2a\x8b\x62\xd9\x56\x4e\xb9\x2f\x5f\xf4\x8e\x6a\x0a\x42\x11\xa1\xcb\xe1\xb4\x0d\xdc\xea\x61\xe8\xc6\x62\x37\xd2\xcb\xbd\x5e\x06\x80\xb0\x1e\x1a\xea\x5c\x5f\x99\x23\xae\xc8\x5a\x25\x6a\x24\x26\x98\x23\x52\xa6\x4a\x56\x58\xd0\x78\x1c\x70\xc1\xd5\x2f\xa4\x7c\x00\xd6\xcf\x76\x40\x9c\x85\x8e\x01\xe2\xe6\xfc\xd4\x3c\xda\xeb\x45\xf2\x55\x53\x29\x20\x83\x53\xef\x5b\x84\xc2\xdb\x6a\x19\x2a\x04\x75\xf0\x2b\xc0\xb7\x24\x0e\x0b\xad\xc6\x70\x5e\x4a\xc4\x6f\xdc\xc2\xbb\xa8\x34\x51\x16\x4d\xa2\xfe\x99\x95\x01\x26\xec\xc2\xd1\xae\x17\xb8\x76\xc7\x11\x49\x39\x5f\x7d\x76\x2a\x33\xba\x12\x61\xae\x1c\x15\x37\xed\x7d\x52\x2d\xda\x44\xb3\xb5\xa5\x42\x07\x12\x67\xb8\x6d\x85\x40\xf1\xa7\xad\x48\x71\x87\xc3\xfd\x12\xa6\xd0\x80\xe8\xaf\x17\x6a\xe1\xd6\x25\xeb\x30\xdd\x6a\xdf\x7d\x2b\x6c\x19\xe9\x39\xa8\x96\x0f\xa3\xf7\x36\xf0\x0c\xd3\xc9\xfc\x93\xf1\xcf\x34\x2e\xb0\x80\x5b\x6e\xd9\x47\x0f\x3c\x15\x42\x2b\xa4\xa9\x87\xf3\xbf\xf8\xf9\x9a\xef\xb8\x2b\x33\x14\x37\x2c\x38\x8e\xd6\x7c\x4f\xa4\x04\xdd\xeb\xb7\xb8\x28\xe4\x6d\x5b\xee\x7d\x66\x6a\x44\x36\x40\x1f\x61\xe5\x48\xab\x4e\x1e\xbc\x93\x1f\x6b\xef\x64\x1d\x52\xb2\x24\xad\x14\xc2\xf5\x32\x2f\xfe\x21\x07\xcb\x7c\x7b\x2e\xd5\xaa\x8a\x44\x61\xa5\x1c\x7a\xd3\x20\x6e\x28\x3c\x76\xb2\x93\x34\x78\xad\xc5\x6c\xf2\x8a\xa1\x57\xf7\x40\xc4\x33\xdb\x36\x61\xeb\xd1\xb4\x2f\xc2\xf4\xbf\x37\xe3\xf4\x64\x7d\x53\x5f\xf0\xce\xcc\x1f\x87\x14\x33\x4e\x9f\x66\xce\x5b\x4c\x0d\xf1\x31\x42\x50\x60\xd8\x59\x97\x1b\xe3\x08\x48\x9e\x90\x9c\x13\x4c\x6f\x8e\x08\x8b\x1c\x15\xed\x0a\x81\x76\x27\xc2\xbb\xc7\x8f\x1f\x94\xcd\x37\xa4\x8e\xaa\x58\xa4\x93\xb6\x34\x1d\x0e\x53\x4b\x21\xd6\x84\xc1\xcd\x0c\x0e\xd3\xe6\x2a\x3f\x80\xb3\x72\x60\x85\x6a\xb2\xe9\xa2\x0d\x0c\xa4\x2b\xd5\xaf\xf2\x19\x5c\xa3\x9e\xa8\xeb\xc5\x65\x82\x60\x84\xef\x5a\x12\x4f\xf9\xf4\x6c\x64\x8a\x73\xfa\x10\xcb\xf5\xf4\xa5\x72\xdf\x6a\x06\x8e\xe1\x12\x2a\xba\x16\x28\x90\xa2\xe9\x3e\xc4\x6b\xa2\x4d\x3b\x44\x4a\x55\x46\xa6\x14\xab\xda\xd7\x4b\xd1\xeb\x28\xb9\x28\x9b\xa8\xca\x5f\xec\x96\x17\x94\x46\x1f\x15\x2a\xfa\x2b\x7b\x84\x68\x23\x4d\xf5\x6a\x95\xf8\xe0\xe5\x2b\xa3\xf6\x42\xbe\xa4\xda\xb3\x17\xe8\xe2\x4c\x09\xfd\x67\x12\x5c\x2f\x7f\xcd\x02\xee\xd7\xe1\x5c\x94\xb5\x18\xe4\xd8\x77\x8d\x25\x77\x9d\x65\x92\x95\xc8\xa6\xae\x6a\x71\xc4\x2f\xe3\xdb\x34\xcd\x28\xc5\x4b\x4f\x18\x38\x56\x7c\xbd\xf4\x9d\x00\x76\x66\x72\x23\x8c\xb9\xdb\x5c\x28\xcb\x4d\x7c\xd3\xd6\x46\xba\xcf\x0b\x9d\x3e\xef\xcc\xd1\x24\xd8\xd7\x4e\xeb\x81\xce\x79\x00\x12\x85\x86\x73\x30\x6e\x6b\xf4\x92\xc9\x64\x8d\xd4\x73\xc2\x54\x69\x28\x8c\xfa\xf3\x6b\x43\x2a\xf9\x14\x61\xb6\x7f\x27\xec\x67\x3b\xc2\x91\x80\xe1\x02\xd2\x3c\xf5\x31\x99\x5c\x88\x31\x4a\x47\xc3\x26\xb0\x29\x63\x2c\xed\xcd\xde\x44\x68\x5e\x1d\xed\xc9\x56\xd7\xcb\x77\x2b\x04\xa1\xd4\x5b\x13\x8c\x66\x48\x3c\x3e\x8b\xd0\xc1\x16\x42\x13\x4a\xa7\x8d\xe1\x2b\xa2\xed\x37\x89\x1f\x7a\xac\x57\x92\x8b\x0a\x85\x6b\xc2\x0f\x0d\x95\xe4\xb1\x89\xf3\x41\xb0\x5c\xea\x54\x72\x64\x60\x2f\xc8\xee\x06\x24\x76\xf3\x16\x69\x78\x0b\x69\xf7\xc8\x40\x6e\x8a\x0d\xa0\x15\x31\x54\xdd\xdc\x8d\x62\xf7\x0b\xfe\xf6\xec\x8b\xca\x5f\xdb\xd7\xd8\xcb\x12\xfd\x0a\x76\xd7\x03\xd6\xfd\xec\x02\x95\x83\xf5\xfd\x79\xc4\x81\x02\x43\x2e\xfd\x7d\xa8\xfb\x91\x10\x16\x8e\xab\x10\x39\x9d\x26\xbb\x8b\x2c\x5d\x1b\x02\x8a\xe8\xbd\xd4\x54\xae\x65\xc6\xe5\xd3\x97\x9d\xa1\xc6\xd0\x2c\x54\xd0\xf2\x54\x32\x24\x98\x98\x25\x0f\x38\xb8\x9f\xb5\x82\x68\x40\x68\x56\x40\xac\xae\xed\x5f\xed\x1b\x09\xe6\xa6\x6e\x92\xd0\x5a\xa7\x6c\x3e\x46\x96\x0a\xc0\x86\x63\x9f\x33\x88\x36\x9f\x90\xe4\xeb\xf1\xb4\xc0\xf5\xd2\x79\x71\xcf\x45\x25\xb1\x7f\x4d\x00\x7d\x75\xb9\x80\x57\x55\xf2\xdc\x40\xa1\x20\xc2\x7d\xbf\x7d\x7e\x44\x15\xd1\x8e\x4c\x8c\x37\x82\x19\xf9\x8a\x19\xf1\x12\x84\x59\x95\x4d\x09\xe3\x5a\x7a\x3c\x19\x7a\x3d\x9f\x6c\x08\xe4\xfb\xc3\x0f\x1d\xbc\xa7\x84\xd5\x37\x45\xff\xc9\x31\xdf\x0c\xcb\xd3\xdd\xa8\xfd\x87\xb2\x25\x30\xa4\x70\x36\xce\x2c\x0e\x45\x6a\xed\x61\xce\x0b\xc5\xde\xdd\x44\xef\xfb\x33\xdd\x7c\xea\x2b\x44\xd3\x06\x87\xdf\xac\x4e\xfa\xac\x3c\x94\x7f\xc5\x0b\x83\x2e\x8e\xac\x76\xcf\x35\xc5\x72\xe2\xa3\xac\xc6\xd4\x32\x4b\xe1\xdc\xe1\xce\xdd\xeb\x06\xc5\xf0\xf5\x15\xe9\x8f\x23\xd2\xcf\x5c\xd0\x8f\x04\xf8\x96\x8c\x81\x78\x88\x55\x44\xe2\xe7\xa6\x41\xac\xaf\xee\xbe\x3d\x57\x5d\x3b\x9e\x6f\x06\x38\xc1\x9a\xf7\xd2\xdf\xdb\x39\x55\x12\x75\x62\x33\xeb\xc1\xab\xdb\x48\xcd\x88\xd6\xbd\xc7\xeb\xe5\x77\xf9\xf1\x3a\xf7\x2f\x0b\xf1\x7f\x01\x00\x00\xff\xff\x1f\x9e\x23\x57\x2e\x07\x00\x00"

func assetsServerTlsSnakeoilCrtBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilCrt,
		"assets/server/tls/snakeoil.crt",
	)
}

func assetsServerTlsSnakeoilCrt() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.crt", size: 1838, mode: os.FileMode(420), modTime: time.Unix(1484544156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsServerTlsSnakeoilKey = "\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x57\xb7\x0e\xab\x60\xb2\xee\x2d\xf9\x1d\x4e\x8f\xae\xc8\xa9\xb8\x05\x39\xe7\x4c\x67\xb2\xc9\x98\x64\xf3\xf4\xcb\x39\xda\x76\x69\x91\x46\xff\x7c\x33\x5f\x98\xff\xfb\xfb\xb1\x82\xa4\x98\x7f\x5c\x8f\xf9\x63\xbb\x4a\xc8\xf8\xc2\x1f\x4d\x48\xfe\xfd\x79\x3e\x0c\x45\x51\x35\x46\x61\x19\x46\xe3\x98\x5a\x60\x90\x37\x9e\xeb\x1f\xa6\x9f\x4f\xaa\x0e\x6b\x4f\x99\xea\xe4\x25\x45\xaa\x26\x4b\x97\x1e\x5f\xc1\x3a\xfa\x9f\xa6\x37\xec\x9c\x15\xbe\x96\x0e\x61\xd0\xf3\x41\x7c\x25\xa7\x28\xac\xfa\x72\xd4\x38\xec\x20\xab\x54\x80\x31\xef\xea\x5d\x49\x8e\x31\x09\x80\xd1\x13\xa1\x9e\x60\x79\x62\xb4\x6d\x80\xb1\xcc\xca\x93\xa1\x53\x4d\x49\xe1\x7a\xff\xa6\xbd\x6f\xdd\xe7\xc3\xa4\xbc\xc5\x47\x82\x22\x99\xa8\x81\xc7\x30\xe3\x73\xb1\x9f\x18\xe4\x70\x06\xfb\x90\x44\x46\x17\x6d\xc5\x7e\xb7\x81\xd9\xed\x2c\x77\x8a\x33\x53\xf7\x18\x14\x92\xc1\x9d\xf1\x65\x4a\x10\x60\x1d\x9e\x8f\x16\x6c\x24\x56\x39\x00\xd3\x1a\x46\x17\x32\x93\xd9\x4b\x26\xa9\x37\xaa\x1a\xc0\xec\x79\xf7\xe2\xdf\x34\x33\x0c\x18\x12\x44\x3c\xf7\x3a\xf6\x3a\x80\x28\x08\xeb\xfe\xf5\xe1\x58\xb4\x50\xec\xe2\xf5\x7c\xc8\xe0\x27\x6c\xdf\xd5\x72\x5a\xc4\x97\xc8\x12\x98\x8b\x90\x32\x88\x59\xb2\x0f\xf5\x60\x03\xde\x7d\x04\x91\x05\x99\xa0\x3d\x40\x63\xae\x0b\xef\x7c\x5a\x5b\xd7\x46\x50\x70\x13\x7c\xc8\x48\xf7\xbc\xe7\xc3\x6a\x5d\xc8\xce\x2d\x78\x7f\x89\x64\x9c\xe3\x3c\xbd\x2d\x38\x28\x9e\xc5\x15\x4b\x16\xf4\x3a\xc7\xf1\xe0\xae\x5f\x81\x51\x47\x43\xb4\x04\x15\x61\x76\xcf\x99\x17\xe4\xaa\xa0\x45\x14\x2a\x91\xdd\x15\x04\xbd\x63\x06\x26\xda\xbf\x99\xd1\xbc\x7f\xc7\xe6\xfd\x34\x6c\xca\xde\x2c\x0b\xd9\xf1\x7a\x60\xd6\x9b\x0d\xb4\x59\xfc\xc2\x4d\x49\x70\x2b\xe5\x74\x18\xa2\x7f\xeb\xac\xc0\x45\x01\xa4\x79\xc4\x0b\x9f\x8f\xaa\xa6\x33\x7d\xc5\x07\x7b\x9d\x2b\x50\x90\x76\x5a\xef\x52\xcc\x40\x96\xd5\x8c\x4e\xea\x70\xb3\xac\x0e\x46\x90\xd6\x88\x6b\x15\x95\xd8\xa5\xaf\xce\x54\xdf\x0b\x64\x37\x03\x0b\x06\xa9\xa4\xfb\xcf\x07\x29\xaa\x9f\x32\x83\x38\x66\x64\x13\xac\xcc\x16\x45\xf7\x92\x8a\x85\x91\xd6\xa0\x36\x14\x53\x40\xea\x5a\xe9\xd6\xa0\x05\x4b\x4d\x5b\x9a\x90\x6a\x25\xd2\x66\x81\xe3\xc2\x9a\xf4\x5e\xc2\x47\xb9\x67\x01\x34\x06\x61\x7d\x66\x43\x6c\xde\x23\x78\x6e\xdf\x7d\x06\x66\xcf\x69\x27\x53\x2b\xc6\x94\x82\xe1\x7c\xb2\x35\x6d\xfd\x2a\xb8\x5d\x7f\x22\x82\x0f\xce\x62\xf9\xfc\x9a\x1d\x3f\xf7\x8f\x4c\x76\xa5\x7a\xbf\xa1\x47\x27\x65\x96\xb8\x1c\x8d\x87\x73\x64\x92\xa9\xd5\xb3\x0d\xe0\xa7\x95\xb7\xf4\x20\x7d\x61\xba\x39\x46\x4e\xb9\x58\x38\x27\x97\x4d\x08\x60\xc2\x92\x87\xc0\x17\xda\xbc\x3c\xe0\x98\x53\x60\x9e\x0f\xc6\xf9\xbb\xcd\x6c\x46\xb8\x3b\xa5\x43\xf5\x16\xb0\x23\xaa\x4c\xb2\x51\xa1\x91\xad\x81\x1c\x55\xea\x8d\xbf\x5c\x9f\x44\x89\xd0\x48\x4c\xce\x06\x43\x8c\x35\x1a\x50\xa6\xb4\x10\xc2\xf4\x3c\xe7\x9e\xa6\xe4\x72\xf1\x6a\xdd\x60\xab\x19\xd0\x9e\xd0\x96\x1a\x7a\x00\x7f\x4c\xce\x67\x87\xdf\xc4\x2a\xed\x9b\x25\x5a\x08\xcb\x13\x84\xcd\x01\x1d\x02\xab\x88\x43\x50\xc2\xe2\x8d\x0f\xba\xaa\xa2\x7b\xf3\x62\x51\x3a\x45\x94\x73\xbf\xa8\x66\x71\x17\x16\xcc\x83\xbf\x3c\x06\x4a\x5b\x90\x06\x61\x7f\x90\x2d\xa4\x6b\x12\x95\x41\x09\x48\xcb\x2d\xe3\x8e\xe4\x92\x9d\xa0\xa6\x36\xa5\x5c\x72\x8d\x94\x35\xc2\xf3\x81\xd5\xdd\x86\xb3\x2d\xb9\x07\x14\xd9\x90\xad\xcc\x9c\x73\x47\x80\x45\x7f\x42\x65\x97\x40\x50\x06\xd6\xbb\x67\x14\x3a\x88\x6b\xf0\x9b\x5a\x81\x19\x23\x16\x72\x95\xcb\x9d\xf2\x6c\xb8\x58\xb6\xe8\xf9\xe0\xae\x12\xed\x35\xd5\xe7\x47\x2d\xd3\x59\xba\xed\xf8\x8e\x52\x38\x58\xa9\xb3\x56\x87\x2a\x43\x89\xa1\x13\x93\x2e\x48\x76\xd5\x0a\x83\x7c\xfc\x3d\x49\xfb\xdf\x79\x81\x62\x30\x72\xc3\xaf\x20\x9e\x8f\x93\x70\x8c\x45\x00\x55\xb3\x5c\xfd\x4a\x5c\xbe\x8b\x7b\xa5\xec\xe9\xab\x30\xf0\xed\xe2\xce\x13\x07\xb1\x49\x69\x23\xaf\xbe\x83\xb0\x4d\xd7\x6b\x87\x74\x99\xf0\xb7\x4e\x1a\xe4\xa3\x1a\x46\x02\x7c\x3e\x14\x4a\x19\x7a\xc5\xfd\xc9\x92\x15\x84\xf2\x2a\x30\x2e\x95\x93\x2f\x9e\x2e\x5e\x35\xa4\x67\xf1\xd0\xfe\xa6\xbe\x7a\x8f\x14\x3f\x9d\x30\x0a\x81\x12\xda\xf8\x71\x32\xf2\x82\xff\x25\x88\x0e\x76\xef\x9d\x64\x1b\xa2\xe3\x85\xe4\xd8\xbf\x87\xb8\x74\x71\xa2\xb9\xcc\x8e\xef\x30\x7c\x38\x0c\xbd\x17\xc9\x62\x62\x6f\xa0\xd9\x1c\xc4\xb2\x12\x4b\xd0\xcc\x98\xd2\xbe\x3f\x9c\x40\x3e\x71\x5d\x50\xb8\xf1\xbb\x2b\x94\xbe\x8e\xf1\x43\x03\x12\x2a\x19\x6e\x91\x84\x8d\x26\x22\x51\xf3\xd8\xe2\x7a\x4d\xd3\x0e\x55\x5d\x82\xe8\x0c\xa2\x2e\xe6\x1a\xd4\xa9\xa7\xbc\x43\xd8\xac\xbe\x96\x8f\xac\x03\xbb\x2c\x17\xf8\x5d\x41\xb3\x2a\x9b\xf9\x40\x73\x90\x95\x3b\xb2\x86\x05\x9d\x37\x35\xdf\x30\x7c\x20\xc0\x20\x95\xd8\x8d\xc7\xad\xf2\x5e\x18\x98\x39\x61\x1b\xcf\xa5\xa1\xb0\x68\x2a\x3c\x4b\x3a\x37\x07\x27\x2a\xc3\xc7\xf3\xd1\x40\x2f\x06\x64\x71\x0a\x99\x11\x4e\x12\x67\x69\x52\x46\xad\x12\xb5\x23\xc8\x92\x0d\x19\x4b\x3e\x4d\x9d\x5f\x3d\x24\x5c\x20\xff\xce\xc5\xfc\x3a\xff\x76\xd8\x11\x18\x50\x86\x0c\x4e\x4d\x6e\x76\x87\xae\xab\xef\x55\xda\x5d\x68\x35\x73\xc0\xe9\x03\xf9\xb4\x64\xf5\x7e\x7e\x7c\x24\x9b\x43\x76\x37\x8b\xe3\xc7\x6b\x89\xd2\x65\xb9\xc7\x6f\x4a\x68\xae\x16\x08\xcf\x30\xc8\x49\xd3\x67\xe0\xfb\xfe\xf9\xe8\xe0\xd6\x14\x1b\x17\xe8\x17\x96\xa5\x1c\xa7\xca\xe0\xb4\xdc\xec\xa9\xf9\x5e\xb6\x39\xe6\xf6\x5b\xfd\xcd\x19\x1d\xbc\x8f\x9d\x94\x24\xd8\x30\x03\x59\x0d\xca\x5c\xdc\xa8\x5d\xf1\xf3\x84\x46\xd7\xe7\x23\xa8\x5d\x36\x5c\xb9\x59\xaf\x03\x9b\xf4\x44\x62\x80\x8d\x79\x47\xd8\x57\xec\x80\xab\x60\x50\x45\xc2\x79\xc3\x86\x89\xaf\x2f\xa9\x47\x10\x94\x2b\xb3\xde\x97\xe9\xc0\xc5\x53\x0e\xb6\xab\x1f\x18\xcf\xc7\xfb\x9b\xf8\x06\xfe\xc1\x83\x28\x66\x9b\x1e\xa6\x09\xbd\xda\x81\xa8\xf5\x87\xe9\x2b\xd5\x62\xe9\x9f\x22\xf5\x85\xcf\x7d\x22\x07\xe7\xb0\xab\xcf\x7b\x3e\x82\x18\xcc\x5a\xc9\xc5\x26\x5c\x75\xac\xf3\xf9\x80\x15\x28\xd6\x60\xf4\xf7\x69\xc4\x4e\x60\x94\x90\x80\x47\x99\x95\xde\xbf\x66\x50\xbd\xc6\x7e\x79\x0a\xb2\xf3\x7b\xf1\x85\xd2\xae\xda\x03\xc5\x80\x03\xf1\x58\xca\x25\x5a\x5b\xc6\x7f\xe9\x83\x75\xf3\x22\x26\x7b\x01\x5a\xcc\x9a\xc4\xfb\xd5\xfd\x2f\xce\xa8\x9f\x2f\xf5\xf1\x5e\x57\xfa\x85\x59\xe7\x07\x62\x5f\x75\x5f\x5a\x59\x30\xfa\x86\x78\x75\x54\x56\xcf\xe5\x60\x16\xd7\x1b\x23\x4b\xe9\xd6\x28\x0e\x27\x91\xe8\x4b\x49\x2b\x11\xd7\x66\x66\x21\x54\x3f\x0b\x90\xcd\x93\x5a\x00\xba\xc7\x86\x12\xa7\x4d\x0f\x97\xf4\xb6\x21\x03\x4d\x3f\x58\x43\xc1\x4c\xa5\x1f\xd5\x36\x19\xc6\x4a\xfc\xb6\xee\x66\x96\xac\x5a\xc5\x66\x07\x5c\xba\x1c\x63\xd6\x1f\x9a\xa5\x60\x10\x3d\x4a\xe3\x14\xf0\x00\x3a\x56\x32\xb8\x2c\x72\x87\xa5\x3a\x5a\x8d\xd8\x21\x67\xdf\xd3\x98\x8a\xb4\xb2\x62\xf7\x23\x23\x8d\xfa\xb9\xfd\x22\x5c\x98\x71\x2c\xbf\x6f\xda\x83\xd4\x4c\x55\xbf\x45\xee\xf5\xac\xa1\xe0\x87\x63\x68\xf7\xea\xb5\x38\xc2\x21\x43\x95\x8b\x40\xec\x1a\xbb\x48\x51\xd9\x59\xa9\xb7\x37\x65\xe8\xaf\xf9\x1d\xd4\xfb\xf9\x98\x63\x59\x4e\x53\xda\xd1\x84\xbb\x29\x92\x08\x2c\x40\x90\xb4\x8b\xaa\x47\xf4\x8c\xb4\xbd\xc1\xe5\x78\x46\xe5\xe9\xa7\xbd\x8b\xfa\x8a\x37\x5b\xc9\x76\xaa\x2a\xb0\xe0\x8a\x7b\x90\xbd\x61\xc9\x6f\xe7\x8d\x18\x09\x4a\xf2\x75\xc0\x0b\x7f\xca\x1c\x28\x99\xa0\xb8\x6c\x77\x5c\x5e\x71\x87\xdb\x94\x2d\x21\x2d\x46\x5c\x65\xb0\xfe\x87\x32\xcb\x72\x3e\x47\x07\xb1\xd9\x5a\xf4\x99\xce\x49\x36\x3d\x1f\x7c\x31\x31\x9d\x37\x32\x82\x7e\x23\x32\x0d\xc8\xb7\xf6\x80\x12\xc2\x30\x19\x76\xbb\x83\xd8\xc9\xd4\x42\x14\x38\x57\x7d\xb9\x24\x2b\x8d\x6b\x8a\x2e\x31\x2f\x3d\x42\xfa\x01\x87\x1c\x1e\x80\xab\xdb\xf5\x5c\xac\x52\x69\x09\xe6\xce\xde\x11\x66\x99\xb8\x3e\xce\x42\xb2\xd9\x78\x66\x0d\xa6\x58\xf1\xc7\x28\xa6\x45\xca\xa6\x76\x5b\xc4\xbe\x4d\x57\x7a\xe1\xcd\x7a\xaa\xbe\x5a\xc0\xb0\xca\x3b\x40\xb5\x1b\x87\x42\x98\x93\xd9\xe4\x3d\xd7\x4a\x7f\x81\x5e\x64\x54\x4f\x6f\xfb\x8e\xab\x6e\x79\xe6\x7b\x53\x3b\x75\xd9\x23\x5d\x87\x7c\xac\xcb\xa0\xd8\x19\xd8\x67\x52\xdb\x13\x76\x18\x7f\x8e\xca\x95\xc1\xdd\x45\x09\xe1\x3f\x70\xad\x28\x78\x3d\x80\x5a\xfa\xcc\xec\xa5\x6f\xe7\x5b\xb8\xae\xaf\x88\xe4\xa0\xb8\x8c\xa3\x74\x7e\xc5\x03\x4d\x51\xf6\xd3\x85\x03\x5e\x66\xf5\x54\xa6\x60\x0f\x31\x71\x77\x19\x3d\xf7\x7c\xa0\x67\x3c\xd9\x99\xa8\xae\x5f\x31\x7d\x49\x2a\x79\xd9\x08\x52\xb0\xbc\x54\x9b\xd8\x14\x1a\x23\x77\xae\x33\xca\x68\x81\x49\xed\x54\x41\x0d\x6d\xd0\xf3\xc5\x9b\x4e\x65\xdc\xe7\x88\x58\xbc\xd8\x5b\xa3\xf0\x8b\x11\x99\xe9\xce\x72\x22\xd7\xf6\xf1\x90\x43\x46\x15\x42\x34\xf1\x66\x93\xe4\x17\x43\x2f\xd3\x9f\xc1\xd1\xc1\x7e\xba\x9b\x8f\xa4\x52\x0d\x6b\x93\xf0\x8d\x04\x1c\xd3\x58\x75\x9a\x68\x6c\x77\x17\x30\x05\xd3\xb5\xfc\x7a\x49\xdf\xc8\xd8\xc4\x40\xac\x80\xc8\x32\x12\x22\xd1\x68\xf6\x24\xa3\x44\xf2\x34\x59\x8d\x62\x7d\x19\x58\x13\xe6\x82\x86\x94\xc3\x05\x3a\x8c\xed\x17\x13\xc7\x16\x82\xce\xed\x9b\x41\x50\x93\xc3\x74\xdc\x46\xc0\xee\xbb\x3c\x53\xe3\x2c\xf0\x4e\xe3\x07\x56\x60\x4a\x90\x65\x02\x18\x97\x25\x29\x5a\x68\x59\xb4\x31\x69\x58\xca\xe6\x2b\x97\x30\xca\x83\x97\x53\x48\x6d\x1d\xde\xef\x0a\xef\xc0\x5f\x37\xdf\x5c\xe8\xc4\xab\x3b\x05\x48\xc4\xfa\x2c\x39\x46\x92\xec\x7c\xda\x5d\x16\x16\xb9\x62\xe1\x2f\x5b\xee\xf2\x23\x04\x63\xaa\xac\x52\x27\x50\xfc\xd5\x93\x0c\xe0\x1c\xe3\xe8\x76\x5e\xa9\xa5\x4a\x94\x4a\x73\xf5\x88\x14\x08\x1b\xec\x89\x87\x6c\x3a\x7a\xe9\x0d\xe8\x61\xd8\x0c\xb8\x42\xdf\x06\xf4\x26\xa9\x7d\x7c\x2d\x3a\x32\x98\x43\x9f\xff\xaa\xf0\xc7\x5f\x9f\x06\xa8\x19\xd5\x7e\x3e\xae\x64\x21\x76\x26\xce\x2f\xf3\xac\xc0\x40\x04\x5b\x62\xe2\x54\x0a\x79\x85\xc8\x05\x85\xa7\xc0\xd5\xb5\xc0\x32\x6a\xfd\x42\xb4\x0c\x9e\x0e\x53\x37\x1c\x2a\xdc\x07\x78\x13\x28\xd6\xea\x76\x9a\xbf\xd5\xde\x0f\xe7\x0b\x58\xc5\xbd\x4e\xf7\x04\xe7\xaf\x9e\x5e\x6d\xc9\x47\x83\x58\x6a\xd3\x94\x9a\x25\x41\x9a\x75\xdb\xd1\x90\xc4\xc6\x7f\x39\x50\x36\xdc\x58\xa3\xa5\xbd\xc5\x21\xb4\xda\x81\x8b\xdf\x1a\x05\x93\xed\x3b\x33\x10\x35\x11\x3b\x97\x76\x55\x8e\x63\xa8\x1c\x00\x10\xeb\xfc\xa6\x7e\xa8\xde\x0a\x1f\x74\xb2\x44\xe6\x73\x8f\x3b\x7a\x76\x59\x2a\x13\x49\x24\x75\xa7\xea\xb7\xb9\xa4\xc2\x8f\xbb\x71\x70\xd7\x44\xb3\x5f\x05\x51\x42\xe5\x98\x6c\xf6\x91\xf4\x23\x97\x7c\x48\x32\xc1\x34\x93\x18\x02\xdc\xda\x50\xeb\x5a\xa4\xd2\xc6\x00\xa0\x08\x8c\x6b\xd4\x11\xf8\xc8\x90\x73\xb8\x33\xb0\xac\xff\xcd\x30\xc6\xf9\x22\x4e\xb2\x52\xe2\xc4\x64\xac\x9d\xeb\x20\xc9\x28\x93\xcb\x93\x53\x9f\x4c\x93\xdf\x16\x04\xcd\xfb\xed\x87\x99\x9c\xee\xaf\x4b\x75\x09\xf5\xe7\x92\xbf\x0a\x2d\xc6\xb6\xb3\x2b\x37\x94\xcb\x3b\x05\xe9\xab\x76\x3b\x51\xf6\x8b\x5e\x77\x08\x27\xe0\xca\x4c\xa3\xca\xc4\xc4\x5a\x37\x86\x80\xbf\x38\xd3\xe4\x2f\x7a\x15\x63\x88\x56\x07\xd8\x79\x09\x13\xc0\xef\x23\xc9\x9f\x94\xb7\xfe\xff\xf3\xf1\xef\x48\x11\x4c\xfe\x7f\x1c\x2f\xff\x09\x00\x00\xff\xff\x23\x79\x2c\xb9\xde\x0c\x00\x00"

func assetsServerTlsSnakeoilKeyBytes() ([]byte, error) {
	return bindataRead(
		_assetsServerTlsSnakeoilKey,
		"assets/server/tls/snakeoil.key",
	)
}

func assetsServerTlsSnakeoilKey() (*asset, error) {
	bytes, err := assetsServerTlsSnakeoilKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/server/tls/snakeoil.key", size: 3294, mode: os.FileMode(420), modTime: time.Unix(1484544156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/server/tls/snakeoil.crt": assetsServerTlsSnakeoilCrt,
	"assets/server/tls/snakeoil.key": assetsServerTlsSnakeoilKey,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"server": &bintree{nil, map[string]*bintree{
			"tls": &bintree{nil, map[string]*bintree{
				"snakeoil.crt": &bintree{assetsServerTlsSnakeoilCrt, map[string]*bintree{}},
				"snakeoil.key": &bintree{assetsServerTlsSnakeoilKey, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

